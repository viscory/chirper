import { useSession } from 'next-auth/react'
import Head from 'next/head'
import Login from '@/components/Login'
import Feed from '@/components/Chirps/Feed'
import { AppContext } from '@/contexts/AppContext'
import { useContext, useEffect, useState } from 'react'
import Modal from '@/components/Common/Modal'
import Sidebar from '@/components/Common/Sidebar'
import Trending from '@/components/Common/Trending'
import { onSnapshot, collection, query, orderBy, where, addDoc ,documentId, deleteDoc, setDoc, doc } from 'firebase/firestore'
import { db, firebase } from '@/firebase'

export default function UserSearch() {
    const {data: session} = useSession()
    const [result, setResult] = useState([])
    const [following, setFollowing] = useState([])
    const [appContext] = useContext(AppContext)
    useEffect(() => {
        console.log(window.location.pathname.split("/")[2])
        console.log("hahayouâ€™redead")
        onSnapshot(
            query(collection(db, `users`), where("tag", "==", window.location.pathname.split("/")[2])),
            (snapshot) => {
                let res = snapshot.docs.map((data) => data.data())
                setResult(res)
                onSnapshot(
                    query(collection(db, `users/${localStorage.getItem("userId")}`, "following")),
                    (snapshot) => {
                        let following = snapshot.docs.map((data) => data.data())
                        for(let i in snapshot.docs){
                            following[i].objectId = snapshot.docs[i].id
                        }
                        console.log(following)
                        setFollowing(following)
                    }
                )
            }
        )
    }, [])
    

    useEffect(() => {
        console.log(result)
        console.log(following)
    }, [result, following])

    const followUser = async (account) => {
        const res = await addDoc(collection(db, `users/${localStorage.getItem("userId")}`, "following"), account)
        setFollowing([...following, {...account, objectId: res.id}])
    }

    const unfollowUser = async (account) => {
        setFollowing(following.filter((item) => item.tag!== account.tag))
        const followingAccount = following.find((item) => item.tag === account.tag)
        console.log(account)
        await deleteDoc(doc(db, `users/${localStorage.getItem("userId")}/following/`, followingAccount.objectId));
    }
 
  return (
    <div>
      <Head>
        <title>Chirper - Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head><main className='relative max-w-[1400px] mx-auto'>
          <Sidebar/>
          <div className='flex gap-6'>
            <div className='sm:ml-20 xl:ml-[340px] w-[600px] min-h-screen border-r border-gray-400 text-white p-2'>
              {
                result.map((account => {
                    return(
                        <div className="border-b-2 border-white py-3 flex">
                            <img src={account.userImg} className="rounded-full w-7 h-7 mr-4 my-auto" />
                            <div className="text-lg mr-4 my-auto">{account.username}</div>
                            <div className="text-lg my-auto">@{account.tag}</div>
                            {
                                account.tag !== session.user.tag
                                ?following.some((item)=> item.tag === account.tag)
                                ?(<div className="ml-auto px-3 py-2 rounded-lg bg-blue-400" onClick={()=>unfollowUser(account)}>Unfollow</div>)
                                :(<div className="ml-auto px-3 py-2 rounded-lg bg-blue-400" onClick={()=>followUser(account)}>Follow</div>):null
                            }
                            
                        </div>
                    )
                }))
              }
            </div>
            <Trending />
          </div>
        </main>
      {appContext?.isModalOpen && <Modal />}
      {
        appContext?.isModalOpen && <Modal />
      }
    </div>
  )
}
